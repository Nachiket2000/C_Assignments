//p1
#include<stdio.h>
#include<string.h>


int main(){
    //Strlen
    char str[]="Nachiket";
    int len=strlen(str);
    printf("The length of the string is %d", len);
    printf("\n");
    //Strcpy
    strcpy(str,"Mohanty");
    printf("The copied string is %s",str);
    printf("\n");
    //Strncpy
    char st[]="Nachiketa";
    strncpy(str,st,2);
    str[3]='\0';
    printf("The n-copied string is %s",str);
    printf("\n");
    //Strcat
    strcat(str," Mohanty");
    printf("The concatenated string is %s",str);
    printf("\n");
    //Strncat
    strncat(str,st,2);
     printf("The n-concatenated string is %s",str);
    printf("\n");
    //Strcmp
    char student[25];
    strcpy(student,"Amita");
    if(strcmp(student,"Amit") == 0)
    printf("Welcome Amita");
    else
    printf("Bye Amita");
    printf("\n");
    //Stricmp
    /*
    char name1[20]="Nachiket";
    char name2[20]="NachiKET";
    int res= strcmpi(name1,name2);
    if(res==0)
    printf("Both names are same");
    else
    printf("Names are not same");
    */
    //Strrev
    /*char namet[]="Nachiket";
    strrev(namet);
    printf("The reversed string is %s",namet);
    */
    //Strncmp
    char name1[20]="Nachiket";
    char name2[20]="NachiKET";
    if(strncmp(name1,name2,3)==0)
    printf("Values are same");
    else
    printf("Values are not same");
    printf("\n");
    //Strchr
    const char stri[] = "http://www.google.com";
    const char ch = '.';
    char *ret;

    ret = strchr(stri, ch);

    printf("String after |%c| is - |%s|\n", ch, ret);
    printf("\n");
    //Strstr
    const char bigstr[20] = "Nachiket";
    const char smstr[10] = "Nachi";
    char *retu;

    retu = strstr(bigstr, smstr);

    printf("The substring is: %s", retu);
    printf("\n");
    //Strtok
    char strung[80] = " This is - www.scaledge.io - website";
    const char s[2] = "-";
    char *token;
    token = strtok(strung, s);
    while( token != NULL ) {
      printf( " %s \n", token );
    
      token = strtok(NULL, s);
   }
return(0);
}

//p2
#include <stdio.h>
#include <string.h>
#include <assert.h>
//Simulate: size_t strlen(const char* str);
size_t strlen(const char* str)
{
    assert(str != NULL);
    int count = 0;
    while (*str != '\0')
    {
        count++;
        str++;
    }
    return count;
}
//Simulate: char* strcpy(char* dest, const char* source);
char* strcpy(char* dest, const char* source)
{
    assert(dest);
    assert(source);
    char* stri = dest;
    while (*dest++ = *source++)
    {
        ;
    }
    return stri;
}
//Simulate: char* strcat(char* dest, const char* source);
char* strcat(char* dest, const char* source)
{
	char* ret = dest;
	assert(dest && source);

	while (*dest)
	{
		dest++;
	}

	while (*dest++ = *source++) 
	{
		;
	}
	return ret;
}
//Simulate: int strcmp(const char* s1, const char* s2);
int strcmp(const char* s1, const char* s2)
{
	assert(s1 && s2);
	while (*s1 == *s2)
	{
		if (*s1 == '\0')
		{
			return 0;
		}
		s1++;
		s2++;
	}
	return *s1 - *s2;
}
//Simulate: char * strstr(const char *stra,const char *strb)
char * strstr(const char *stra,const char *strb)
{
    
	assert(stra);
	assert(strb);
	char p = (char)stra;
    char *move_p = p;
    char * sp = (char*)strb;
	if (*strb == '\0')
		return NULL;

	while (*p)
	{
    
		move_p = p;
		sp = (char*)strb;
		while (*sp && *sp == *move_p)
		{
    
			sp++;
			move_p++;
		}
		if (*sp == '\0')
			return p;
		p++;
	}
}

//Simulate: char*strchr(const char *string,int c)
char*strchr(const char *string,int c)
{
    int i = 0;
    assert(string);
    while (*string!=NULL)
    {
        if (*string == c)
        {
            return string;
        }
        else
        {
            string++;
        }
    }
    return NULL;
}
int main()
{
    char arr[] = "Scaledge";
    int len = strlen(arr);
    printf("len = %d\n", len);
    char ar[15] = { 0 };
    strcpy(ar, "Hello World");
    printf("%s\n", ar);
    char arr1[20] = "Hello ";
	char arr2[] = "Scaledge";
	printf("%s\n", strcat(arr1, arr2));
	
	char* p = "abcd";
	char* q = "abc";
	int ret = strcmp(p, q);
	if (ret == 0)
	{
		printf("p == q\n");
	}
	else if (ret > 0)
	{
		printf("p>q\n");
	}
	else{
		printf("p<q\n");
	}	
	const char *str4 = "helloScaledgeHelloscaledge2398";
	const char *str5 = "Scaledge";
	char *ret3 = strstr(str4, str5);
	printf("%s\n",ret3);
	printf("\n");
	
    char*arra = "abcdefe";
    char x = 'e';
    char *results = strchr(arra, x);
    printf("%s", results);
    return 0;
}


//p3

#include<stdio.h>
#include<string.h>

void removeChar(char* s, char c)
{
 
    int j, n = strlen(s);
    for (int i = j = 0; i < n; i++)
        if (s[i] != c)
            s[j++] = s[i];
 
    s[j] = '\0';
}
int main(){
    char s[] = "Nachiket";
    removeChar(s, 'c');
    printf("%s",s);
    return 0;
}

//p4
#include <stdio.h>
#include <stdlib.h>
#define NO_OF_CHARS 256


int* getCharCountArray(char* str)
{
	int* count = (int*)calloc(sizeof(int), NO_OF_CHARS);
	int i;
	for (i = 0; *(str + i); i++)
		count[*(str + i)]++;
	return count;
}


char* removeChars(char* str, char* mask_str)
{
	int* count = getCharCountArray(mask_str);
	int ip_ind = 0, res_ind = 0;
	while (*(str + ip_ind))
	{
		char temp = *(str + ip_ind);
		if (count[temp] == 0)
		{
			*(str + res_ind) = *(str + ip_ind);
			res_ind++;
		}
		ip_ind++;
	}


	*(str + res_ind) = '\0';

	return str;
}


int main()
{
    
	char str[50];
	char sec_str[50];
	printf("Enter the first string: ");
	scanf("%s",str);	
	printf("Enter the second string: ");
	scanf("%s",sec_str);
	printf("The output after removing all the occurences is: ");
	printf("%s", removeChars(str, sec_str));
	return 0;
}

//p5
//String of digits into its numerical equivalent
#include<stdio.h>
#include <stdlib.h>

int main() {
    // Converting a numeric string
    char str[10] = "122";
    int x = atoi(str);
    printf("Converting '122': %d\n", x);

    // Converting an alphanumeric string
    char str2[10] = "Hello!";
    x = atoi(str2);
    printf("Converting 'Hello!': %d\n", x);

    // Converting a partial string
    char str3[10] = "99Hello!";
    x = atoi(str3);
    printf("Converting '99Hello!': %d\n", x);
    return 0;
}

//p7
#include<stdio.h>  
  
void roman(int num)  
{  
    while(num)  
    {  
        if(num >= 1000)  
        {  
            printf("m");  
            num = num - 1000;  
        }  
        else if(num >= 500)  
        {  
            printf("d");  
            num = num - 500;  
        }  
        else if(num >= 100)  
        {  
            printf("c");  
            num = num - 100;  
        }  
        else if(num >= 50)  
        {  
            printf("l");  
            num = num - 50;  
        }  
        else if(num >= 10)  
        {  
            printf("x");  
            num = num - 10;  
        }  
        else if(num >= 5)  
        {  
            printf("v");  
            num = num - 5;  
        }  
        else if(num >= 1)  
        {  
            printf("i");  
            num = num - 1;  
        }  
    }  
  
    printf("\n");  
}  
  
int main()  
{  
    int year;  
  
    printf("Input the year to get its Roman Equivalent\n");  
    scanf("%d", &year);  
  
    roman(year);  
  
    return 0;  
}

//p8
#include <stdio.h>
void numberWords(char n[])
{
    int i=0;
    while(n[i]!='\0')
    {
        switch(n[i])
        {
            case '0': 
                printf("Zero ");
                break;
            case '1': 
                printf("One ");
                break;
            case '2': 
                printf("Two ");
                break;
            case '3': 
                printf("Three ");
                break;
            case '4': 
                printf("Four ");
                break;
            case '5': 
                printf("Five ");
                break;
            case '6': 
                printf("Six ");
                break;
            case '7': 
                printf("Seven ");
                break;
            case '8': 
                printf("Eight ");
                break;
            case '9': 
                printf("Nine ");
                break;
        }
        i++;
    }
}
int main()
{
    char n[10];
    scanf("%s",n);
    numberWords(n);
    return 0;
}

//p9
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
 

 
char *rep_str(const char *s, const char *old, const char *new1)
{
    char *ret;
    int i, count = 0;
    int newlen = strlen(new1);
    int oldlen = strlen(old);
 
    for (i = 0; s[i] != '\0'; i++)    
    {
        if (strstr(&s[i], old) == &s[i]) 
        {
            count++;
            i += oldlen - 1;
        }
    }
    ret = (char *)malloc(i + count * (newlen - oldlen));
    if (ret == NULL)
        exit(EXIT_FAILURE);
    i = 0;
    while (*s)
    {
        if (strstr(s, old) == s) 
        {
            strcpy(&ret[i], new1);
            i += newlen; 
            s += oldlen;
        }
        else
        ret[i++] = *s++;
    }
    ret[i] = '\0';
    return ret;
}
 
int main(void)
{
    char mystr[100], c[10], d[10];
    printf("Enter a string :\n");
    gets(mystr);
    printf("Enter the character to be replaced :\n");
    scanf(" %s",c);
    printf("Enter the new character :\n");
    scanf(" %s",d);
    char *newstr = NULL;
    printf("Source : ");
    puts(mystr);
    printf("Find : ");
    puts(c);
    printf("Replace : ");
    puts(d);
    newstr = rep_str(mystr, c,d);
    printf("Output : ");
    printf("%s\n", newstr);
    free(newstr);
    return 0;
}

//p10
#include<stdio.h>
#include<stdlib.h>
int main(){
char *s = "This is a test";
int len = 0;

while(s[len++]);//strlen(s) + 1
for (int i = 0 ; s[i] != '\0' ; i++){
    if (s[i] == 't' && s[i+1] == 'e') {//count "te"
        ++len;
        ++i;
    }
}

char *newstring = malloc(len);
int j = 0;
for (int i = 0 ; s[i] != '\0' ; i++){
    if (s[i] == 't' && s[i+1] == 'e') {
        newstring[j++] = 'g';
        newstring[j++] = 'h';
        newstring[j++] = 'o';
        ++i;
    } else {
        newstring[j++] = s[i];
    }
}
newstring[j] = '\0';
printf("Original string is: ");
puts(s);
printf("New string is: ");
puts(newstring);
free(newstring);
return 0;
}
